#!/bin/bash

## import_fmw.sh script version 1.0.
##
## Copyright (c) 2025 Oracle and/or its affiliates
## Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
##
### This script imports the tablespaces, schemas and roles generated by the export_fmw.sh script
### It uses the Oracle Data Pump Export and DDL extraction generated by export_fmw.sh to "move" a FMW/RCU DB system (typically JRF or SOA domain)
### to a different PDB or entirely different DB. It would typically be used to "migrate" source FMW schemas without connectivity to the original DB.
### - It identifies the schemas based on the information generated by the export script. 
### - It requires a tns alias mapping to a service (attached to a single instance in RAC configuration) to conect to the precise PDB.
###     Create an instance-specific service and an alias for it in tnsnames.ora. Pending to be automated. For example:
###     [oracle@fmwdbnode1 ~]$ srvctl add service -db $ORACLE_UNQNAME -service export_soaedg.example.com -preferred  SOADB231 -pdb SOADB23_pdb1
###     [oracle@fmwdbnode1 ~]$ srvctl start service -s  export_soaedg.example.com -db $ORACLE_UNQNAME
###     [oracle@fmwdbnode1 ~]$ lsnrctl status | grep export_soaedg.example.com
###     Service "export_soaedg.example.com" has 1 instance(s).
###     [oracle@fmwdbnode1 ~]$ cat /u01/app/oracle/product/23.0.0.0/dbhome_1/network/admin/tnsnames.ora | grep export
###     EXPORT_SOADB23_PDB1=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=drdbrac12a-scan.dbsubnet.vcnpho80.oraclevcn.com)(PORT=1521))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=export_soaedg.example.com)(FAILOVER_MODE=(TYPE=select)(METHOD=basic))))
###
###
### Usage:
###
###             ./import_fmw.sh [TNS_ALIAS] [IMPORT_DIRECTORY]
### Where:
###             TNS_ALIAS:
###                     Alias in tnsnames.ora that identifies the connect string to be used for the export
###             IMPORT_DIRECTORY:
###                     Directory where the export tar generated by export_fmw.sh has been extracted


if [[ $# -eq 2 ]];
then
        export dt=`date +%y-%m-%d-%H-%M-%S`
        export tns_alias=$1
        export dumpdir=$2
else
        echo ""
        echo "ERROR: Incorrect number of parameters used: Expected 2, got $#"
        echo ""
        echo "Usage:"
        echo "    $0 [TNS_ALIAS] [IMPORT_DIRECTORY]"
        echo ""
        echo "Example:  "
        echo "    $0 EXPORT_SOADB23_PDB1 /u01/dbdataexports "
        exit 1
fi


#PREPARE DIRS AND GATHER SCN.
export dumpdirname=DUMP_INFRA
export logdir=$dumpdir/import/logs
export cfgdir=$dumpdir/export/cfg
mkdir -p $logdir

if [ -d $dumpdir ]; then
        echo "Found $dumpdir directory continuing..."
else
        echo "Directory $dumpdir does not exist!"
        echo "Nothing to do, exiting."
        exit 1
fi
if [ -f $cfgdir/complete_schema_list.cfg ]; then
	echo "Found schema list file, continuing..."
	export schema_list=$(cat $cfgdir/complete_schema_list.cfg)
else
	echo "Schema list file $cfgdir/complete_schema_list.cfg does not exist!"
       	echo "Make sure you have extracted the resulted tar generated by the export_fmw.sh script in the $dumpdir directory!"
	exit 1
fi
if [ -f $cfgdir/prefix.cfg ]; then
        echo "Found RCU prefix file, FMW schemas will be imported."
        export prefix=$(cat $cfgdir/prefix.cfg)
	export rcu_schema_list=$(cat $cfgdir/rcu_schema_list.cfg)
else
        echo "Prefix marker file $cfgdir/prefix.cfg does not exist."
        echo "Importing only custom schemas."
        exit 1
fi

echo
echo "*********************************************************************************"
echo "*********************************************************************************"
echo "****************  Welcome to the WLS/FMW Oracle Data Pump utility! **************"
echo "*********************STARTING IMPORT UTILITY*************************************"
echo "*********************************************************************************"
echo "*********************************************************************************"

echo

echo "************************************************************************************"
echo " NOTE: Errors on role grants, buffer queues and initial schema creation are expected"
echo " and inocous both if the imported artifacts preexist or if they are being imported  "
echo " for the first time. Relevant errors will be reported in the log files at:          "
echo " $logdir"
echo "************************************************************************************"
echo

export exec_path="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source $exec_path/common_export_import_fmw.sh
check_connection SYS $tns_alias

#SYS generic ops
echo "Creating import directory for Data Pump..."
sqlplus -s sys/""${sys_pass}""@${tns_alias} as sysdba > $logdir/dump_dir_query.log << EOF
DROP DIRECTORY ${dumpdirname};
CREATE DIRECTORY ${dumpdirname} AS '$dumpdir';
GRANT READ,WRITE ON DIRECTORY ${dumpdirname} TO SYS;
set line 500;
column directory_name format a30;
column directory_path format a60;
SELECT directory_name, directory_path FROM dba_directories WHERE directory_name='${dumpdirname}';
exit
EOF
echo "Data Pump directory created."
echo "*********************************************************************************"
echo "COMPLETE LIST OF SCHEMAS TO BE IMPORTED: "
for schema in $schema_list;do
	echo "$schema"
done
echo "*********************************************************************************"

echo
echo "Creating tablespaces, schemas and roles..."
echo "Check log file $logdir/ddl_exec_query_import.log for errors"
waiting &
waitpid=$!
sqlplus sys/""${sys_pass}""@${tns_alias} as sysdba > $logdir/ddl_exec_query_import.log << EOF
spool on
spool $logdir/create_all.log
@$dumpdir/create_all_tablespaces.sql;
@$dumpdir/create_all_roles.sql;
@$dumpdir/create_all_schemas.sql;
spool off
EOF
kill $waitpid
wait $waitpid > /dev/null 2>&1


#Initial grants to schemas
echo
echo "Assigning tablespace and dump dir rights to schemas..."
for schema in $schema_list;do
        echo "Updating schema rights for $schema..."
        sqlplus sys/""${sys_pass}""@${tns_alias} as sysdba > $logdir/grant_dumpdir_query_${schema}_import.log << EOF
        GRANT READ,WRITE ON DIRECTORY $dumpdirname TO $schema;
        GRANT UNLIMITED TABLESPACE TO $schema;
EOF
done

echo

for schema in $schema_list;do
	echo
	echo "*********************************************************************************"
	check_connection $schema $tns_alias
	echo "Initiating import for schema $schema..."
        echo "Please check logs at"
        echo "-- ${logdir}/${schema}_out_import.log"
	echo "-- ${dumpdir}/${schema}_import.log  "
        waiting &
        waitpid=$!
	impdp ${schema}/"${schema_pass}"@${tns_alias} schemas=${schema} directory=$dumpdirname dumpfile=${schema}_export.dmp logfile=${schema}_import.log PARALLEL=1 CLUSTER=N encryption_password=${schema_pass} > ${logdir}/${schema}_out_import.log 2>&1;
	kill $waitpid
        wait $waitpid > /dev/null 2>&1
	echo "Import of $schema complete."
done


if [[ -n "$prefix" ]];then
        echo
        echo "*********************************************************************************"
        echo "Importing SYSTEM_SCHEMA_VERSION_REGISTRY for FMW prefix $prefix... "
        echo "Please check log at ${dumpdir}/SYSTEM_SCHEMA_VERSION_REGISTRY_import.log "
        waiting &
        waitpid=$!
        impdp  \"sys/${sys_pass}@${tns_alias} as sysdba\" SCHEMAS=SYSTEM directory=$dumpdirname DUMPFILE=SYSTEM_SCHEMA_VERSION_REGISTRY.dmp LOGFILE=SYSTEM_SCHEMA_VERSION_REGISTRY_import.log PARALLEL=1 CLUSTER=N encryption_password=${sys_pass} TABLE_EXISTS_ACTION=APPEND > ${logdir}/SYSTEM_SCHEMA_VERSION_REGISTRY_import.log 2>&1;
        kill $waitpid
        wait $waitpid > /dev/null 2>&1
        echo "Import of SYSTEM_SCHEMA_VERSION_REGISTRY complete."
	echo
	echo "Updating schema rights for FMW schemas..."
	for schema in $rcu_schema_list;do
        	sqlplus sys/""${sys_pass}""@${tns_alias} as sysdba > $logdir/grant_SCHEMA_VERSION_REGISTRY_${schema}_import.log << EOF
        	GRANT SELECT ON "SYSTEM"."SCHEMA_VERSION_REGISTRY" TO "${schema}";
EOF
	done
	echo "FMW schemas' grants complete"
fi

echo "*********************************************************************************"
echo "Reconciling grants and schemas..."
waiting &
waitpid=$!
sqlplus sys/""${sys_pass}""@${tns_alias} as sysdba  > $logdir/reconcile_schemas_import.log  << EOF
@$dumpdir/create_all_schemas.sql;
EOF
kill $waitpid
wait $waitpid > /dev/null 2>&1
echo "Reconcile complete."
export queue_list=$(cat  ${cfgdir}/queue_list.cfg)

echo

echo "Starting queues..."
waiting &
waitpid=$!
for queue in $queue_list;do
        export simple_queue_name=$(echo "${queue}"|awk -F'.' '{print $2}')
        squeue_type=$(sqlplus -s sys/""${sys_pass}""@${tns_alias} as sysdba  << EOF
        set echo off;
        set head off;
        set termout off;
	select QUEUE_TYPE from dba_queues where NAME='$simple_queue_name' and owner like '${prefix}|_%' escape '|';
EOF
)
        queue_type=$(echo $squeue_type| tr -d '[:space:]')
        if [ "$queue_type" == "EXCEPTION_QUEUE" ]
        then
                sqlplus -s sys/""${sys_pass}""@${tns_alias} as sysdba > $logdir/${queue}_start_query_import.log << EOF
                set echo off;
                set head off;
                set termout off;
                EXECUTE DBMS_AQADM.start_queue (queue_name => '$queue',enqueue=> false,dequeue=> true);

EOF
        else
                sqlplus -s sys/""${sys_pass}""@${tns_alias} as sysdba > $logdir/${queue}_start_query_import.log << EOF
                set echo off;
                set head off;
                set termout off;
                EXECUTE DBMS_AQADM.start_queue (queue_name => '$queue');
EOF

        fi

done
kill $waitpid
wait $waitpid > /dev/null 2>&1
echo "Queues started."

echo ""
echo ""
echo "*********************************************************************************"
echo "************************************* DONE! *************************************"
echo "*********************************************************************************"
echo
echo "--CHECK LOGS AT:"
echo "$logdir"
echo
echo "*********************************************************************************"
echo "*********************************************************************************"
